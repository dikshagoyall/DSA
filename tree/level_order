#include <stdio.h>
#include <stdlib.h>

// macro definition
#define S 100

// structure definition

typedef struct block
{
    int data;
    struct block *left, *right;
} node;

typedef struct
{
    node* arr[S];
    int front, rear;
} queue;

void init(queue *);
node *create_node(int val);
int isfull(queue *);
int isempty(queue *);
void enqueue(queue *, node*);
node *dequeue(queue *);
void levelorder(node *root);

// main function
int main()
{
    node *root = NULL;

    root = create_node(1);
    root->left = create_node(2);
    root->right = create_node(3);
    root->left->left = create_node(4);
    root->left->right = create_node(5);
    root->right->left = create_node(6);
    root->right->right = create_node(7);

    printf("Levelorder: ");
    levelorder(root);

    return 0;
}

node *create_node(int val)
{
    node *tmp = (node *)malloc(sizeof(node));
    tmp->data = val;
    tmp->left = tmp->right = NULL;
    return tmp;
}

// initialising the queue
void init(queue *pts)
{
    pts->front = -1;
    pts->rear = -1;
}

// checking if queue is full or not
int isfull(queue *pts)
{
    if ((pts->rear == S - 1 && pts->front == 0) || (pts->front == pts->rear + 1))
        return 1;
    else
        return 0;
}

// checking if queue is empty or not
int isempty(queue *pts)
{
    if (pts->front == -1)
        return 1;
    else
        return 0;
}

// pushing an element from front of queue
void enqueue(queue *pts, node* data)
{
    if (isfull(pts) == 1)
        return;
    else
    {
        if  (pts->front == -1)
            pts->front = pts->rear = 0;
        else if (pts->rear == S - 1)
            pts->rear = 0;
        else
            ++pts->rear;
        pts->arr[pts->rear] = data;
    }
}

node *dequeue(queue *pts)
{
    if (isempty(pts) == 1)
        return 0;
    else
    {
        node* temp = pts->arr[pts->front];
        if (pts->front == pts->rear)
            pts->front = pts->rear = -1;
        else if (pts->front == S - 1)
            pts->front = 0;
        else
            pts->front++;
        return temp;
    }
}

void levelorder(node *root)
{
     if (root == NULL)
        return;
    queue line;

    init(&line);
    enqueue(&line, root);

    while (!isempty(&line))
    {
        root = dequeue(&line);
        if (root->left != NULL)
            enqueue(&line, root->left);

        if (root->right != NULL)
            enqueue(&line, root->right);

        printf("%d ", root->data);
    }
}
